version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infra/initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5

  zipkin:
    image: openzipkin/zipkin:3
    ports:
      - "9411:9411"

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 5

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"
      - "8025:8025"

  config:
    build:
      context: ./config-service
      dockerfile: docker/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: native
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS: file:/workspace/config
    volumes:
      - ./config-repo:/workspace/config
    ports:
      - "8888:8888"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka:
    build:
      context: ./discovery-service
      dockerfile: docker/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_URI}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_URI}
    ports:
      - "8761:8761"
    depends_on:
      config:
        condition: service_healthy

  gateway:
    build:
      context: ./gateway
      dockerfile: docker/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_URI}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_URI}
    ports:
      - "8080:8080"
    depends_on:
      config:
        condition: service_healthy
      eureka:
        condition: service_started

  user-service:
    build:
      context: ./user-service
      dockerfile: docker/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_URI}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_URI}
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      eureka:
        condition: service_started

  question-service:
    build:
      context: ./question-service
      dockerfile: docker/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_URI}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_URI}
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      eureka:
        condition: service_started

  exam-service:
    build:
      context: ./exam-service
      dockerfile: docker/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_URI}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_URI}
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      eureka:
        condition: service_started

  career-service:
    build:
      context: ./career-service
      dockerfile: docker/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_URI}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_URI}
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      eureka:
        condition: service_started

  news-service:
    build:
      context: ./news-service
      dockerfile: docker/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_URI}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_URI}
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
      eureka:
        condition: service_started

  nlp-service:
    build: ./nlp-service
    ports:
      - "7000:7000"
    command: uvicorn app:app --host 0.0.0.0 --port 7000
    depends_on:
      redis:
        condition: service_started

volumes:
  postgres-data:
